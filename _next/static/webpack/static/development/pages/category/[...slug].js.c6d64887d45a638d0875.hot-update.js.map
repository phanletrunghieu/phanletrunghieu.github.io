{"version":3,"file":"static/webpack/static/development/pages/category/[...slug].js.c6d64887d45a638d0875.hot-update.js","sources":["webpack:///./pages/category/[...slug].js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport Meta from '../../components/Meta'\nimport matter from 'gray-matter'\nimport PostBox from '../../components/PostBox'\nimport Header from '../../components/Header'\nimport Footer from '../../components/Footer'\nimport Paginator from '../../components/Paginator'\nimport { getSlug } from '../../utils/common'\n\nlet perPage = 3\n\nexport default class CategoryTemplate extends PureComponent {\n    render() {\n        const {allBlogs, title, description, categories, slug, currentPage, totalPage} = this.props\n        let currentCategory = categories.find(c => getSlug(c) == slug)\n        return (\n            <div>\n                <Meta title={`${currentCategory} - ${title}`} description={description} />\n                <Header categories={categories} currentSlug={slug} />\n                <div style={{marginTop: 80}}>\n                    {\n                        allBlogs.map(post => (\n                            <PostBox\n                                key={post.slug}\n                                image={post.frontmatter.image}\n                                title={post.frontmatter.title}\n                                date={post.frontmatter.date}\n                                readDuration={post.frontmatter.readDuration}\n                                markdownBody={post.markdownBody}\n                                slug={post.slug}\n                            />\n                        ))\n                    }\n                </div>\n                <Paginator\n                    count={totalPage}\n                    current={currentPage}\n                    href=\"/category/[...slug]\"\n                    baseUrl={\"/category/\"+getSlug(currentCategory)}\n                />\n                <Footer/>\n            </div>\n        )\n    }\n}\n\nCategoryTemplate.defaultProps = {\n    allBlogs: [],\n    categories: [],\n}\n\nexport async function getStaticProps(ctx) {\n    const { slug } = ctx.params\n    let categorySlug = \"\"\n    let page = 1\n    if (Array.isArray(slug)) {\n        if (slug.length > 0) {\n            categorySlug = slug[0]\n        }\n\n        if (slug.length > 1) {\n            page = slug[1]\n        }\n    }\n    \n    const siteConfig = await import(`../../data/config.json`)\n    //get posts & context from folder\n    let context = require.context('../../posts', true, /\\.md$/)\n    const keys = context.keys()\n    const values = keys.map(context)\n\n    let posts = []\n    let categories = []\n    keys.map((key, index) => {\n        // Create slug from filename\n        const blogSlug = key\n            .replace(/^.*[\\\\\\/]/, '')\n            .split('.')\n            .slice(0, -1)\n            .join('.')\n        \n        const value = values[index]\n        // Parse yaml metadata & markdownbody in document\n        const document = matter(value.default)\n\n        if (!document.data.categories) {\n            return\n        }\n\n        categories = categories.concat(document.data.categories)\n\n        let findIndex = document.data.categories.findIndex(c => getSlug(c) == categorySlug)\n        if (findIndex != -1) {\n            posts.push({\n                frontmatter: document.data,\n                markdownBody: document.content,\n                slug: blogSlug,\n            })\n        }\n    })\n\n    posts.sort((a, b)=>new Date(b.frontmatter.date) - new Date(a.frontmatter.date))\n\n    let totalPage = Math.ceil(posts.length/perPage)\n    posts = posts.slice((page-1)*perPage, page*perPage)\n\n    // remove duplicate\n    categories = categories.filter((c, index, arr) => arr.indexOf(c) == index)\n    \n    return {\n        props: {\n            slug: categorySlug,\n            categories,\n            allBlogs: posts,\n            title: siteConfig.default.title,\n            description: siteConfig.default.description,\n            currentPage: page,\n            totalPage,\n        },\n    }\n}\n\nexport async function getStaticPaths() {\n    let context = require.context('../../posts', true, /\\.md$/)\n    const keys = context.keys()\n    const values = keys.map(context)\n    \n    let slugs = []\n    let count = []\n    keys.map((key, index) => {\n        const value = values[index]\n        // Parse yaml metadata & markdownbody in document\n        const document = matter(value.default)\n        if (!document.data.categories) {\n            return\n        }\n\n        document.data.categories.forEach(category => {\n            let slug = getSlug(category)\n            let index = slugs.findIndex(c => c == slug)\n            if (index == -1) {\n                slugs.push(slug)\n                count.push(1)\n            } else {\n                count[index]++\n            }\n        });\n    })\n\n    // create paths with `slug` param\n    let paths = []\n    slugs.forEach((slug, i) => {\n        paths.push(`/category/${slug}`)\n        let numPage = Math.ceil(count[i]/perPage)\n        let pathsWithPagination = [...Array(numPage).keys()].map(k => `/category/${slug}/${k+1}`)\n        paths = paths.concat(pathsWithPagination)\n    });\n    \n    return {\n        paths,\n        fallback: true,\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAhCA;AACA;;AADA;AAmCA;AACA;AACA;AAFA;;;;A","sourceRoot":""}