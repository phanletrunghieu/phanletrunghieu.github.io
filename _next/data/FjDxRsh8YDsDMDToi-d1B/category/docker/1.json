{"pageProps":{"slug":"docker","categories":["ReactJS","Docker","GI/CD","Tip","Gitlab"],"allBlogs":[{"frontmatter":{"author":"Hieu Phan","date":"2020-06-20T09:26:00.000Z","image":"/images/5-docker-ngon-het-dung-luong-day-la-cach-don-dep/cover.jpg","title":"Docker ngốn hết dung lượng. Đây là cách dọn dẹp?","readDuration":"15 min","categories":["Docker"]},"markdownBody":"\n\n## 1. Container\n### 1.1. Stop and remove all containers\n\n```bash\ndocker stop $(docker ps -aq)\ndocker rm $(docker ps -aq)\n```\n\n### 1.2. Remove idle container\n\n```bash\ndocker rm $(docker ps -a -f status=exited -f status=created -q)\n```\n\n## 2. Volume\n### 2.1. Remove dangling volumes\nYêu cầu: Docker 1.9 and later\n\nDangling volumes là những volumes không liên kết với bất kỳ 1 container nào.\n\n```bash\ndocker volume prune\n```\n\n### 2.2. Remove container & it's volumes\n\n```bash\ndocker rm -v container_name\n```\n\n## 3. Image\n### 3.1. Remove unsed images\n\n```bash\ndocker rmi $(docker images -a -q)\n```\n\n### 3.2. Remove dangling images\n\nDangling images là những images có tag là `<none>`.\n\nKhi bạn dùng multistage để build 1 image thì sẽ xuất hiện những images kiểu thế này. Việc giữ lại những image này sẽ giúp bạn build nhanh hơn trong những lần tới, nhưng thường nó cũng ngốn dung lượng khá lớn. Hãy cân nhắc kỹ trước khi xóa nó.\n\n**List**\n```bash\ndocker images -f dangling=true\n```\n\n**Remove**\n```bash\ndocker images purge\n```\n\n## 4. Remove Unused/Dangling Images, Containers, Volumes, and Networks\n\nDocker cung cấp 1 command duy nhất để xóa những thứ không cần thiết. Bạn có thể thử. Nhưng nếu 1 ngày bạn chạy lệnh này rồi mà thấy đĩa cứng vẫn bị ngốn dung lượng một cách bí ẩn, hãy thử dùng các lệnh ở trên.\n\n```bash\ndocker system prune\n```\n\n**Include unused images (not just dangling images)**\n```bash\ndocker system prune -a\n```","slug":"5-docker-ngon-het-dung-luong-day-la-cach-don-dep"},{"frontmatter":{"author":"Hieu Phan","date":"2020-06-11T14:55:00.000Z","image":"/images/2-difference-copy-and-add-in-dockerfile/cover.jpg","title":"Dockerfile: COPY khác ADD?","readDuration":"10 min","categories":["Docker"]},"markdownBody":"\nNếu bạn thường build docker image hoặc đọc các tài liệu về docker, thỉnh thoảng bạn sẽ gặp `COPY` và `ADD`. Vậy `COPY` khác `ADD` có gì khác nhau? Nên sử dụng cái nào?\n\nCả `COPY` và `ADD` có một chức năng chung là chép file từ 1 nơi nào đó vào bên trong docker image. Còn điểm khác nhau?\n\n## COPY\n\n`COPY` cho phép bạn chép 1 file từ đĩa cứng vào docker image.\n\n## ADD\n\n`ADD`ngoài chức năng chép file từ đĩa cứng, còn hỗ trợ chép file từ 2 nguồn khác là:\n- Chép file từ 1 URL\n- Giải nén file tar vào docker image. Ví dụ `ADD http://abc.com/app.tar.xz /app/`, các file bên trong file `app.tar.xz` sẽ được chép vào `/app/` trong docker image.\n\n## Khi nào nên dùng `COPY`, khi nào nên dùng `ADD`?\nRiêng cá nhân mình, thì mình đa số dùng `COPY`, và rất ít dùng `ADD`. Vậy có phải mình đã bỏ qua 1 tính của docker là chép file từ url hay giải nén.\n\n> Docker image khi build sẽ tạo ra nhiều layer. Ứng với mỗi lệnh trong Dockerfile, sẽ có 1 layer được sinh ra. Khi dùng lệnh `ADD` để download file, và file đó sẽ được lưu mãi mãi tại layer của lệnh `ADD` đó. Trường hợp file cần download có dung lượng khoảng vài GB, nhưng chỉ dùng tạm để build app, và có thể xoá cũng không thể ảnh hưởng đến app, thì dùng `ADD` kích thước docker image sẽ rất lớn.\n\n**Tip:** Với việc download file mình sẽ `curl` thay thế cho `ADD`.\nVí dụ\n\n```Dockerfile\nRUN curl -O https://example.com/files/abc.tar.gz && \\\n    tar -xzf abc.tar.gz && \\\n    echo \"do something\" && \\\n    rm -rf abc && \\\n    rm abc.tar.gz\n```\n\nNhư vậy docker sẽ lưu lại 1 layer, layer này không có file `abc.tar.gz`","slug":"2-difference-copy-and-add-in-dockerfile"}],"title":"Hlog - Code for good, not for food","description":"Cùng nhau chia sẻ kinh nghiệm, mò mẫm kiến thức mới","currentPage":"1","totalPage":1},"__N_SSG":true}