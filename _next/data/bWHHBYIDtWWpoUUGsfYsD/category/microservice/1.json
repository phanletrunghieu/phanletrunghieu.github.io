{"pageProps":{"slug":"microservice","categories":["ReactJS","Docker","GI/CD","Tip","Gitlab","Microservice"],"allBlogs":[{"frontmatter":{"author":"Hieu Phan","date":"2020-06-22T15:22:00.000Z","image":"/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/cover.jpg","title":"Quản lý log tập trung trong microservice với ELK. Phần 1: trên docker swarm","readDuration":"30 min","categories":["Docker","Microservice"]},"markdownBody":"\n## 1. Kiến trúc\n\n![List node](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/architect.png)\n\n## 2. Khởi tạo docker swarm\n\nBạn có thể dùng nhiều server có cài sẵn docker để tạo thành 1 cluster. Tốt nhất là docker cùng version để tránh gặp những lỗi tào lao. Trong bài viết này mình dùng docker-machine để giả lập 3 node để demo.\n\n### 2.1. Tạo 1 cluster với 3 node\n\n```bash\ndocker-machine create -d virtualbox --virtualbox-memory \"2048\" node1\ndocker-machine create -d virtualbox --virtualbox-memory \"1024\" node2\ndocker-machine create -d virtualbox --virtualbox-memory \"1024\" node3\n```\n\nFixing `out of memory` error of Elasticsearch\n\n```bash\ndocker-machine ssh node1 sudo sysctl -w vm.max_map_count=262144\ndocker-machine ssh node2 sudo sysctl -w vm.max_map_count=262144\ndocker-machine ssh node3 sudo sysctl -w vm.max_map_count=262144\n```\n\nKiểm tra các node đã tạo\n\n```bash\ndocker-machine ls\n```\n\n![List node](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/1-list-node.png)\n\n### 2.2. Cho `node1` làm node manager.\n\n```bash\ndocker-machine ssh node1\ndocker swarm init --advertise-addr 192.168.99.104\n```\n\n`192.168.99.104` là ip của node 1, đã kiểm tra ở trên.\n\n![List node](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/2-init-swarm.png)\n\nKết quả ở trên cho ta 1 command để các node khác có thể join vào cluster.\n\n### 2.3. Join các node còn lại vào cluster\n\nTa lần lượt ssh vào từng node và chạy lệnh join ở trên.\n\n```bash\ndocker-machine ssh node2\ndocker swarm join --token SWMTKN-1-5dk4ysohsctxbifjmb6x8xa5i6qps81au5k4fmzzqmne3l3oz0-ac99bh5vrw8zm3lychgpu3cwh 192.168.99.104:2377\n```\n\n```bash\ndocker-machine ssh node3\ndocker swarm join --token SWMTKN-1-5dk4ysohsctxbifjmb6x8xa5i6qps81au5k4fmzzqmne3l3oz0-ac99bh5vrw8zm3lychgpu3cwh 192.168.99.104:2377\n```\n\n> Chú ý: `token` trong lệnh `docker swarm join` sẽ khác nhau ở mỗi lần chạy. Nên chỗ này đừng copy của mình nhé. Lỗi đấy!\n\n## 3. Deploy ELK lên docker swarm\n\nSSH vào node manager `docker-machine ssh node1`.\n\nTạo 1 file `docker-stack.yml` có nội dung như sau:\n\n```yaml\nversion: '3'\n\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0\n    ports:\n      - \"9200:9200\"\n    volumes:\n      - esdata:/usr/share/elasticsearch/data\n    environment:\n      ES_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n      ELASTIC_PASSWORD: \"changeme\"\n      discovery.type: single-node\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:7.8.0\n    volumes:\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n    depends_on:\n      - elasticsearch\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.8.0\n    environment:\n      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'\n    ports:\n      - \"5601:5601\"\n    depends_on:\n      - logstash\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\n  logspout:\n    image: gliderlabs/logspout:v3\n    command: 'udp://logstash:5000'\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      - logstash\n    deploy:\n      mode: global\n      restart_policy:\n        condition: on-failure\n        delay: 30s\n\n  visualizer:\n    image: dockersamples/visualizer:stable\n    ports:\n      - \"8081:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    labels:\n      app: \"visualizer\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\nvolumes:\n  esdata:\n    driver: local\n```\n\nTạo 1 file `logstash.conf` có nội dung như sau:\n\n```\ninput {\n   udp {\n   \t\tport => 5000\n   \t\tcodec => json\n   \t}\n}\n\n## Add your filters / logstash plugins configuration here\n\nfilter {\n  if [docker][image] =~ /logstash/ {\n    drop { }\n  }\n}\n\noutput {\n    elasticsearch {\n      hosts => \"elasticsearch:9200\"\n      user => \"elastic\"\n      password => \"changeme\"\n    }\n\n    stdout { codec => rubydebug }\n}\n```\n\nTiến hành deploy\n\n```bash\ndocker stack deploy -c docker-stack.yml elk\n```\n\nThường mình sẽ gặp 1 lỗi là logspout sẽ không kết nối được đến logstash, do logstash chưa init xong. Bạn hãy đợi 1 thời gian rồi chạy `docker service update --force elk_logspout` để restart lại logspout trên các node.\n\n## 4. Xem log từ Kibana\n\nDùng browser truy cập vào 1 node bất kỳ trong swarm với port `5601`\n\n![List node](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/1-list-node.png)\n\nTrong trường hợp của mình, mình sẽ truy cập vào `http://192.168.99.104:5601`.\n\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/3-kibana-1.jpg)\n\nTạo 1 index pattern `logstash*`\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/4-kibana-2.jpg)\n\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/5-kibana-3.jpg)\n\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/6-kibana-4.jpg)\n\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/7-kibana-5.jpg)\n\n![Kibana](/images/6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm/8-kibana-6.png)\n\nOke! Tới đây giao diện để truy xuất log đã hiện ra. Bạn có thể filter log theo thời gian, theo app,... Chỗ này bạn có thể tự mò nhé, giao diện kibana cũng khá dễ sử dụng.","slug":"6-quan-ly-log-tap-trung-elk-phan-1-tren-docker-swarm"}],"title":"Hlog - Code for good, not for food","description":"Cùng nhau chia sẻ kinh nghiệm, mò mẫm kiến thức mới","currentPage":"1","totalPage":1},"__N_SSG":true}