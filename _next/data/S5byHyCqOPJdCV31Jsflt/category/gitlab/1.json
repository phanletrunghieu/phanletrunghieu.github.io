{"pageProps":{"slug":"gitlab","categories":["ReactJS","Docker","GI/CD","Tip","Gitlab"],"allBlogs":[{"frontmatter":{"author":"Hieu Phan","date":"2020-06-14T11:56:00.000Z","image":"/images/4-gitlab-cac-tinh-nang-hay-nhung-it-duoc-chu-y/cover.jpg","title":"Giblab: Các tính năng hay nhưng ít được chú ý","readDuration":"15 min","categories":["Gitlab"]},"markdownBody":"\nCó thể nói Gitlab là 1 hệ sinh thái bao gồm các công cụ khá đầy đủ cho việc phát triển phần mềm, bao gồm: git registry, docker registry, CI/CD, task management,... Mĩnh sẽ giới thiệu thêm 1 vài tính năng nhỏ, nhưng rất hay\n\n## 1. Gitlab CI Template\n\n**Template trong cùng 1 file `.gitlab-ci.yml`**\n\n```yaml\nvariables:\n  GIT_CLEAN_FLAGS: none\n  IMAGE_NAME: registry.domain.com/app/payment_service\n  \n.build:\n  image: docker:stable\n  stage: build\n  services:\n    - docker:dind\n  script:\n    - mkdir -p ~/.docker\n    - echo $DOCKER_AUTH_CONFIG > ~/.docker/config.json\n    - docker build -t $IMAGE_NAME:$IMAGE_TAG .\n    - docker push $IMAGE_NAME:$IMAGE_TAG\n\nbuild-stagging:\n  extends: .build\n  variables:\n    IMAGE_TAG: latest-dev\n  only:\n    - master\n\nbuild-prod-version:\n  extends: .build\n  variables:\n    IMAGE_TAG: $CI_COMMIT_TAG\n  only:\n    - tag\n  except:\n    - branches\n\nbuild-prod-latest:\n  extends: .build\n  variables:\n    IMAGE_TAG: latest\n  only:\n    - tag\n  except:\n    - branches\n```\n\nTa sẽ định nghĩa những phần chung của tác vụ build vào `.build`. Trong `.build`, phần script mình có dùng 2 biến môi trường `IMAGE_NAME` và `IMAGE_TAG`. `IMAGE_NAME` thì mình có định nghĩa ở global `variables`. Còn `IMAGE_TAG` được định nghĩa ở đâu?\n\nSau đó ta sẽ định nghĩa những job build khác cho riêng từng môi trường, và extends lại `.build`. Ở đoạn trước mình còn câu hỏi `IMAGE_TAG` được định nghĩa ở đâu, thì ở từng môi trường mình sẽ build ra 1 docker image với 1 tag khác nhau. Vậy ở mỗi job extend từ `.build` ta sẽ thêm `IMAGE_TAG` vào `variables`, nó sẽ tự động gắn vào scripts trước đó để chạy.\n\n**Template từ 1 repo khác**\n\nVí dụ ta có 2 project được đặt ở 2 repo. 2 repo này ta có nhu cậu chạy những job giống nhau. Ta có thể tạo 1 repo `gitlab-ci-template` chứa 1 file `template.yml` có nội dung:\n\n```yaml\nvariables:\n  GO111MODULE: on\n  GIT_CLEAN_FLAGS: none\n\nstages:\n  - test\n\ntest:\n  stage: test\n  retry:\n    max: 1\n  only:\n    - master\n    - merge_requests\n  script:\n    - make lint\n    - make test\n```\n\n\nỞ 2 repo kia, ta tạo file `.gitlab-ci.yml` như sau:\n\n```yaml\ninclude:\n  - project: 'example-group/gitlab-ci-template'\n    ref: master\n    file: '/template.yml'\n\nimage: golang:1.14.4-alpine\n```\n\nVậy 2 repo đã có job `test`\n\n## 2. Coverage\n\n![Coverage example](/images/4-gitlab-cac-tinh-nang-hay-nhung-it-duoc-chu-y/coverage-example.png)\n\nVí dụ đối với 1 project sử dụng golang, khi test mình sẽ dùng lệnh\n\n```bash\ngo test -race -v -coverprofile=coverage/coverage.txt.tmp -count=1  ./...\n```\n\nTrong 1 đống kết quả trả về thì có 1 dòng hiển thị test đã coverage bao nhiêu phần trăm\n\n```\ntotal:\t\t\t\t\t(statements)\t93.6%\n```\n\nDùng regex để lấy đoạn này ra là `/total:\\s+\\(statements\\)\\s+(\\d+.\\d+\\%)/`\n\nCuối cùng là gắn regex trên vào `.gitlab-ci.yml` như sau:\n\n```yaml\nunit-test:\n  image: golang:1.14.4-alpine\n  stage: test\n  only:\n    - merge_requests\n  script:\n    - make unit-test\n  coverage: '/total:\\s+\\(statements\\)\\s+(\\d+.\\d+\\%)/'\n```\n\n## 3. Tự động retry job khi fail\n\n[Gitlab document](https://docs.gitlab.com/ee/ci/yaml/#retry)\n\n```yaml\nunit-test:\n  image: golang:1.14.4-alpine\n  stage: test\n  only:\n    - merge_requests\n  script:\n    - make unit-test\n  retry:\n    max: 2\n    when:\n      - runner_system_failure\n      - stuck_or_timeout_failure\n      - stuck_or_timeout_failure\n      - scheduler_failure\n      - api_failure\n```\n","slug":"4-gitlab-cac-tinh-nang-hay-nhung-it-duoc-chu-y"}],"title":"Hlog - Cùng nhau mò mẫm","description":"Cùng nhau chia sẻ kinh nghiệm, mò mẫm kiến thức mới","currentPage":"1","totalPage":1},"__N_SSG":true}