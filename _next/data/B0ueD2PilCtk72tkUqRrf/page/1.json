{"pageProps":{"categories":["ReactJS","Docker"],"allBlogs":[{"frontmatter":{"author":"Hieu Phan","date":"2020-06-11T14:55:00.000Z","image":"/images/2-difference-copy-and-add-in-dockerfile/cover.jpg","title":"Dockerfile: COPY khác ADD?","readDuration":"10 min","categories":["Docker"]},"markdownBody":"\nNếu bạn thường build docker image hoặc đọc các tài liệu về docker, thỉnh thoảng bạn sẽ gặp `COPY` và `ADD`. Vậy `COPY` khác `ADD` có gì khác nhau? Nên sử dụng cái nào?\n\nCả `COPY` và `ADD` có một chức năng chung là chép file từ 1 nơi nào đó vào bên trong docker image. Còn điểm khác nhau?\n\n## COPY\n\n`COPY` cho phép bạn chép 1 file từ đĩa cứng vào docker image.\n\n## ADD\n\n`ADD`ngoài chức năng chép file từ đĩa cứng, còn hỗ trợ chép file từ 2 nguồn khác là:\n- Chép file từ 1 URL\n- Giải nén file tar vào docker image. Ví dụ `ADD http://abc.com/app.tar.xz /app/`, các file bên trong file `app.tar.xz` sẽ được chép vào `/app/` trong docker image.\n\n## Khi nào nên dùng `COPY`, khi nào nên dùng `ADD`?\nRiêng cá nhân mình, thì mình đa số dùng `COPY`, và rất ít dùng `ADD`. Vậy có phải mình đã bỏ qua 1 tính của docker là chép file từ url hay giải nén.\n\n> Docker image khi build sẽ tạo ra nhiều layer. Ứng với mỗi lệnh trong Dockerfile, sẽ có 1 layer được sinh ra. Khi dùng lệnh `ADD` để download file, và file đó sẽ được lưu mãi mãi tại layer của lệnh `ADD` đó. Trường hợp file cần download có dung lượng khoảng vài GB, nhưng chỉ dùng tạm để build app, và có thể xoá cũng không thể ảnh hưởng đến app, thì dùng `ADD` kích thước docker image sẽ rất lớn.\n\n**Tip:** Với việc download file mình sẽ `curl` thay thế cho `ADD`.\nVí dụ\n\n```Dockerfile\nRUN curl -O https://example.com/files/abc.tar.gz && \\\n    tar -xzf abc.tar.gz && \\\n    echo \"do something\" && \\\n    rm -rf abc && \\\n    rm abc.tar.gz\n```\n\nNhư vậy docker sẽ lưu lại 1 layer, layer này không có file `abc.tar.gz`","slug":"2-difference-copy-and-add-in-dockerfile"},{"frontmatter":{"author":"Hieu Phan","date":"2020-05-22T17:06:00.000Z","image":"/images/1-how-do-i-build-this-blog/cover.jpg","title":"Tôi đã tạo blog này thế nào?","readDuration":"45 min","categories":["ReactJS"]},"markdownBody":"\n## Chuẩn bị\n- Kiến thức cơ bản về ReactJS, NextJS\n- Soạn thảo văn bản với markdown\n- Tài khoản Github\n\n## Giới thiệu\nGithub có 1 chức năng là Github Page, cho phép chúng ta deploy những website tĩnh (HTML, css, javascript). Trước đây khi nhắc đến việc tạo ra 1 website tĩnh thì ta sẽ nghĩ ngay đến [GatsbyJS](https://www.gatsbyjs.org), còn NextJS là framework mạnh về việc hỗ trợ xây dựng ứng dụng React Server Side Render (SSR) và routing. Nhưng tin vui là vừa qua NextJS đã có thêm tính năng **Static Exporting**.\n\n> **Static Exporting** là gì vậy? Khác gì so với SSR?\n- SSR: server nhận được request -> server render code react thành html -> trả html về client\n- Static: html được tạo ra ngay khi ta build app -> server nhận được request -> trả html về client\n\n## Setup\n\n### Khởi tạo NextJS project\n\n```bash\nnpx create-next-app\n# or\nyarn create next-app\n```\n\nBlog này sẽ được deploy lên Github Page, và để tiện nhất, nhanh nhất, nên sẽ không có chuyện gọi API và lấy data để hiển thị. Dữ liệu blog sẽ được lưu trong những file markdown, mỗi file chứa một bài post.\n\nCấu trúc thư mục:\n- **assets:** các icon, hình ảnh để import trực tiếp vào React\n- **components:** các layout, component của blog (Header, Footer, Meta,...)\n- **data:** file `config.json` chứa các thông tin tổng quát của website (title, description, url,...)\n- **pages:** folder mặc định của NextJS. Mỗi file trong thư mục này tương ứng với 1 trang web.\n- **posts:** chứa các file markdown, nội dung của các bài post trong blog\n- **public:** chủ yếu chứa các hình ảnh chèn vào các bài post\n- **styles:** chứa các file scss, làm đẹp cho web\n\n### Config NextJS load file *.md\n\nCài `raw-loader` cho webpack\n```bash\nyarn add raw-loader\n```\n\nThêm nội dung sau vào file `next.config.js`. (Nếu không có thì tạo)\n\n```js\nmodule.exports = {\n    poweredByHeader: false,\n    webpack: function(config) {\n        config.module.rules.push({\n            test: /\\.md$/,\n            use: 'raw-loader',\n        })\n        return config\n    },\n}\n```\n\n### Config NextJS load icon svg\n\nCài `babel-plugin-inline-react-svg`\n```bash\nyarn add --dev babel-plugin-inline-react-svg\n```\n\nThêm nội dung sau vào file `.babelrc`. (Nếu không có thì tạo)\n\n```json\n{\n    \"presets\": [ \"next/babel\" ],\n    \"plugins\": [ \"inline-react-svg\" ]\n}\n```\n\n### Cài scss\n\nChỉ cần cài module `sass`\n\n```bash\nyarn add sass\n```\n\n## Code\n**Ý tưởng:** NextJS hỗ trợ build static thông qua 2 hàm `getStaticProps` và `getStaticPaths`. 2 hàm này được gọi khi build project. Mỗi file trong thư mục `pages` đều được NextJS hỗ trợ 2 hàm này. \n\n- getStaticProps: với hàm này, ta sẽ đọc dữ liệu từ file .md và truyền vào props của ReactComponent. Trong hàm này ta sẽ thực hiện:\n    - Đối với trang chủ hoặc trang category, ta sẽ đọc nội dung của tất cả file *.md. Truyền data vào props\n    - Đối với trang chi tiết, ta chỉ cần đọc đúng 1 file *md. Ví dụ `/post/abc-de` thì ta cần đọc file `abc-de.md`\n- getStaticPaths: url của 1 bài post là `/post/[slug]`. Ví dụ ta có 2 bài post là `post 1` và `post 2`, thì url là `/post/post-1` và `/post/post-2`. Như vậy trong hàm này, chúng ta sẽ thực hiện các tác vụ\n    - List hết tất cả file *.md trong folder `posts`\n    - Chuẩn hoá tên file thành url. `Post 1` thành `/post/post-1`\n\n## Deploy lên Github Page\n\nBình thường khi export project NextJS thành file html, ta sẽ dùng lệnh\n\n```bash\nnext export\n```\n\nNhưng Github Page sử dụng Jekyll, mà Jekyll thì không đọc được các file có ký tự \"_\" ở đầu (`_next`, `_app.js`). NextJS lại export ra rất nhiều file như thế. Nên ta cần disable Jekyll trong project.\n\nThay đổi các scripts trong file package.json như sau:\n```json\n\"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build && next export && touch out/.nojekyll\",\n    \"start\": \"next start\"\n}\n```\n\nChạy lệnh:\n```bash\nyarn build\n```\n\nNextJS sẽ export file là lưu vào folder `out`. Giờ ta chỉ cần push hết các file trong folder `out` lênn Github.\n\n![out folder](/images/1-how-do-i-build-this-blog/out-folder.png)\n\nURL Github Page sẽ có dạng https://{username}.github.io. Ví dụ: https://phanletrunghieu.github.io.\nVậy làm sao để code trong `out` có thể truy cập được thông qua tên miền trên.\nTạo 1 repo với lên là {username}.github.io (Ví dụ: phanletrunghieu.github.io). Và commit -> push code bên trong `out` lên.\n\nXong!\n\n## Kết\n\n[Project mẫu](https://github.com/phanletrunghieu/myblog)\n","slug":"1-how-do-i-build-this-blog"}],"title":"Hlog - Cùng nhau mò mẫm","description":"Cùng nhau chia sẻ kinh nghiệm, mò mẫm kiến thức mới","currentPage":"1","totalPage":1},"__N_SSG":true}